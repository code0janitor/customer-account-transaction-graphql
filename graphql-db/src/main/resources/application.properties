server.port= 9090

# DataSource settings: set here your own configurations for the database
# connection. In this example we have "netgloo_blog" as database name and
# "root" as username and password.
spring.datasource.driverClassName= com.mysql.cj.jdbc.Driver
spring.datasource.url = jdbc:mysql://localhost:3306/customer_account_transaction?useTimezone=true&serverTimezone=CST


spring.datasource.username = graphql
spring.datasource.password = ChangeMe#01

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = true
spring.jpa.generate-ddl= true

# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update
spring.jpa.hibernate.format_sql= true

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect


# application.yml
#
# server:
#  port: 8020
#spring:
#  datasource:
#    driverClassName: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://localhost:3306/CUSTOMER-ACCOUNT-TRANSACTION
#    username: graphql
#    password: graphql
#  jpa:
#    generate-ddl: true
#    show-sql: true
#
#    hibernate:
#      dialect: org.hibernate.dialect.MySQLDialect
#      use-new-id-generator-mappings: false
#      format_sql: true
#      ddl-auto: create,update
#      naming_strategy: org.hibernate.cfg.ImprovedNamingStrategy